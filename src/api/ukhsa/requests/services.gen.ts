// This file is auto-generated by @hey-api/openapi-ts
import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type {
  GetGeographyDetailData,
  GetGeographyDetailResponse,
  GetGeographyListData,
  GetGeographyListResponse,
  GetGeographyTypeDetailData,
  GetGeographyTypeDetailResponse,
  GetGeographyTypeListData,
  GetGeographyTypeListResponse,
  GetHealthResponse,
  GetMetricDetailData,
  GetMetricDetailResponse,
  GetMetricListData,
  GetMetricListResponse,
  GetSubThemeDetailData,
  GetSubThemeDetailResponse,
  GetSubThemeListData,
  GetSubThemeListResponse,
  GetThemeDetailData,
  GetThemeDetailResponse,
  GetThemeListResponse,
  GetTopicDetailData,
  GetTopicDetailResponse,
  GetTopicListData,
  GetTopicListResponse,
} from './types.gen';

export class HealthService {
  /**
   * This health probe can be used to determine whether the service is ready.
   * @returns unknown No response body
   * @throws ApiError
   */
  public static getHealth(): CancelablePromise<GetHealthResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/health/',
    });
  }
}

export class ThemesService {
  /**
   * This endpoint returns a list of all available **themes** and hyperlinks to their corresponding detail view.
   *
   * A `theme` is the largest topical subgroup e.g. **infectious_disease**.
   * @returns ThemeList
   * @throws ApiError
   */
  public static getThemeList(): CancelablePromise<GetThemeListResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/themes/',
    });
  }

  /**
   * This endpoint returns a hyperlink to the next step in the data hierarchy.
   *
   * In this case, the next step in the data hierarchy is **sub_themes**.
   * @param data The data for the request.
   * @param data.theme
   * @returns ThemeDetail
   * @throws ApiError
   */
  public static getThemeDetail(data: GetThemeDetailData): CancelablePromise<GetThemeDetailResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/themes/{theme}',
      path: {
        theme: data.theme,
      },
    });
  }
}

export class SubThemesService {
  /**
   * This endpoint returns a list of all available **sub_themes** and hyperlinks to their corresponding detail view.
   *
   * The `sub_theme` field is positioned 1 step below `theme`.
   *
   * A `sub_theme` is a topical subgroup  e.g. **respiratory**
   * @param data The data for the request.
   * @param data.theme
   * @returns SubThemeList
   * @throws ApiError
   */
  public static getSubThemeList(data: GetSubThemeListData): CancelablePromise<GetSubThemeListResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/themes/{theme}/sub_themes/',
      path: {
        theme: data.theme,
      },
    });
  }

  /**
   * This endpoint returns a hyperlink to the next step in the data hierarchy.
   *
   * In this case, the next step in the data hierarchy is **topics**.
   * @param data The data for the request.
   * @param data.subTheme
   * @param data.theme
   * @returns SubThemeDetail
   * @throws ApiError
   */
  public static getSubThemeDetail(data: GetSubThemeDetailData): CancelablePromise<GetSubThemeDetailResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/themes/{theme}/sub_themes/{sub_theme}',
      path: {
        sub_theme: data.subTheme,
        theme: data.theme,
      },
    });
  }
}

export class TopicsService {
  /**
   * This endpoint returns a list of all available **topics** and hyperlinks to their corresponding detail view.
   *
   * The `topic` field is positioned 1 step below `sub_theme`.
   *
   * A `topic` is the name of the topic/threat e.g. **COVID-19**
   * @param data The data for the request.
   * @param data.subTheme
   * @param data.theme
   * @returns TopicList
   * @throws ApiError
   */
  public static getTopicList(data: GetTopicListData): CancelablePromise<GetTopicListResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/themes/{theme}/sub_themes/{sub_theme}/topics',
      path: {
        sub_theme: data.subTheme,
        theme: data.theme,
      },
    });
  }

  /**
   * This endpoint returns a hyperlink to the next step in the data hierarchy.
   *
   * In this case, the next step in the data hierarchy is **geography_type**.
   * @param data The data for the request.
   * @param data.subTheme
   * @param data.theme
   * @param data.topic
   * @returns TopicDetail
   * @throws ApiError
   */
  public static getTopicDetail(data: GetTopicDetailData): CancelablePromise<GetTopicDetailResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/themes/{theme}/sub_themes/{sub_theme}/topics/{topic}',
      path: {
        sub_theme: data.subTheme,
        theme: data.theme,
        topic: data.topic,
      },
    });
  }
}

export class GeographyTypesService {
  /**
   * This endpoint returns a list of all available geography types and hyperlinks to their corresponding detail view.
   *
   * The `geography_type` field is positioned 1 step below `topic`.
   *
   * A `geography_type` is the type of geography e.g. **Nation**
   * @param data The data for the request.
   * @param data.subTheme
   * @param data.theme
   * @param data.topic
   * @returns GeographyTypeList
   * @throws ApiError
   */
  public static getGeographyTypeList(data: GetGeographyTypeListData): CancelablePromise<GetGeographyTypeListResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/themes/{theme}/sub_themes/{sub_theme}/topics/{topic}/geography_types',
      path: {
        sub_theme: data.subTheme,
        theme: data.theme,
        topic: data.topic,
      },
    });
  }

  /**
   * This endpoint returns a hyperlink to the next step in the data hierarchy.
   *
   * In this case, the next step in the data hierarchy is **geography**.
   * @param data The data for the request.
   * @param data.geographyType
   * @param data.subTheme
   * @param data.theme
   * @param data.topic
   * @returns GeographyTypeDetail
   * @throws ApiError
   */
  public static getGeographyTypeDetail(
    data: GetGeographyTypeDetailData,
  ): CancelablePromise<GetGeographyTypeDetailResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/themes/{theme}/sub_themes/{sub_theme}/topics/{topic}/geography_types/{geography_type}',
      path: {
        geography_type: data.geographyType,
        sub_theme: data.subTheme,
        theme: data.theme,
        topic: data.topic,
      },
    });
  }
}

export class GeographiesService {
  /**
   * This endpoint returns a list of all available geographies and hyperlinks to their corresponding detail view.
   *
   * The `geography` field is positioned 1 step below `geography_type`.
   *
   * A `geography` is the value of the geography e.g. **London**
   * @param data The data for the request.
   * @param data.geographyType
   * @param data.subTheme
   * @param data.theme
   * @param data.topic
   * @returns GeographyList
   * @throws ApiError
   */
  public static getGeographyList(data: GetGeographyListData): CancelablePromise<GetGeographyListResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/themes/{theme}/sub_themes/{sub_theme}/topics/{topic}/geography_types/{geography_type}/geographies',
      path: {
        geography_type: data.geographyType,
        sub_theme: data.subTheme,
        theme: data.theme,
        topic: data.topic,
      },
    });
  }

  /**
   * This endpoint returns a hyperlink to the next step in the data hierarchy.
   *
   * In this case, the next step in the data hierarchy is **metric**.
   * @param data The data for the request.
   * @param data.geography
   * @param data.geographyType
   * @param data.subTheme
   * @param data.theme
   * @param data.topic
   * @returns GeographyDetail
   * @throws ApiError
   */
  public static getGeographyDetail(data: GetGeographyDetailData): CancelablePromise<GetGeographyDetailResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/themes/{theme}/sub_themes/{sub_theme}/topics/{topic}/geography_types/{geography_type}/geographies/{geography}',
      path: {
        geography: data.geography,
        geography_type: data.geographyType,
        sub_theme: data.subTheme,
        theme: data.theme,
        topic: data.topic,
      },
    });
  }
}

export class MetricsService {
  /**
   * This endpoint returns a list of all available metrics and hyperlinks to their corresponding detail view.
   *
   * The `metric` field is positioned 1 step below `geography`.
   *
   * A `metric` is the name of the metric being queried for e.g. **COVID-19_deaths_ONSByDay**
   * @param data The data for the request.
   * @param data.geography
   * @param data.geographyType
   * @param data.subTheme
   * @param data.theme
   * @param data.topic
   * @returns MetricList
   * @throws ApiError
   */
  public static getMetricList(data: GetMetricListData): CancelablePromise<GetMetricListResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/themes/{theme}/sub_themes/{sub_theme}/topics/{topic}/geography_types/{geography_type}/geographies/{geography}/metrics',
      path: {
        geography: data.geography,
        geography_type: data.geographyType,
        sub_theme: data.subTheme,
        theme: data.theme,
        topic: data.topic,
      },
    });
  }

  /**
   * This endpoint will provide the full timeseries of a slice of data.
   *
   * There are a set of mandatory URL parameters and optional query parameters:
   *
   * Note that by default, results are paginated by a page size of 5
   *
   * This page size can be changed using the *page_size* parameter.
   * The maximum supported page size is **365**.
   *
   * ---
   *
   * Whereby the mandatory URL parameters are as follows in order from first to last:
   *
   * - `theme` - The largest topical subgroup e.g. **infectious_disease**
   *
   * - `sub_theme` - A topical subgroup e.g. **respiratory**
   *
   * - `topic` - The name of the topic e.g. **COVID-19**
   *
   * - `geography_type` - The type of the geography type e.g. **Nation**
   *
   * - `geography` - The name of the geography associated with metric  e.g. **London**
   *
   * - `metric` - The name of the metric being queried for e.g. **COVID-19_deaths_ONSByDay**
   *
   * ---
   *
   * From here you can filter the data further via a set of optional query parameters:
   *
   * - `stratum` - Smallest subgroup a metric can be broken down into e.g. ethnicity, testing pillar
   *
   * - `age` - Smallest subgroup a metric can be broken down into e.g. **15_44** for the age group of 15-44 years
   *
   * - `sex` - Patient gender e.g. **f** for Female or **all** for all genders
   *
   * - `year` - Epi year of the metrics value (important for annual metrics) e.g. **2020**
   *
   * - `month` - Epi month of the metric value (important for monthly metrics) e.g. **12**
   *
   * - `epiweek` - Epi week of the metric value (important for weekly metrics) e.g. **30**
   *
   * - `date` - The date which this metric value was recorded in the format **YYYY-MM-DD** e.g. **2020-07-20**
   *
   * - `in_reporting_delay_period` - A boolean indicating whether the data point is considered to be subject
   * to retrospective updates.
   * @param data The data for the request.
   * @param data.geography
   * @param data.geographyType
   * @param data.metric
   * @param data.subTheme
   * @param data.theme
   * @param data.topic
   * @param data.age
   * @param data.date
   * @param data.epiweek
   * @param data.inReportingDelayPeriod
   * @param data.page A page number within the paginated result set.
   * @param data.pageSize Number of results to return per page.
   * @param data.sex
   * @param data.stratum
   * @param data.year
   * @returns MetricTimeSeries
   * @throws ApiError
   */
  public static getMetricDetail(data: GetMetricDetailData): CancelablePromise<GetMetricDetailResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/themes/{theme}/sub_themes/{sub_theme}/topics/{topic}/geography_types/{geography_type}/geographies/{geography}/metrics/{metric}',
      path: {
        geography: data.geography,
        geography_type: data.geographyType,
        metric: data.metric,
        sub_theme: data.subTheme,
        theme: data.theme,
        topic: data.topic,
      },
      query: {
        age: data.age,
        date: data.date,
        epiweek: data.epiweek,
        in_reporting_delay_period: data.inReportingDelayPeriod,
        page: data.page,
        page_size: data.pageSize,
        sex: data.sex,
        stratum: data.stratum,
        year: data.year,
      },
    });
  }
}
